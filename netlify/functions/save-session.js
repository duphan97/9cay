// netlify/functions/save-session.js
const { Octokit } = require("@octokit/core");

exports.handler = async (event, context) => {
  // 1. Ki·ªÉm tra ph∆∞∆°ng th·ª©c HTTP
  if (event.httpMethod !== "POST") {
    return {
      statusCode: 405,
      body: JSON.stringify({ message: "Method Not Allowed. Use POST." }),
    };
  }

  // L·∫•y PAT t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
  const GITHUB_PAT = process.env.GITHUB_PAT;
  if (!GITHUB_PAT) {
    return {
      statusCode: 500,
      body: JSON.stringify({ message: "Server configuration error: GITHUB_PAT not set." }),
    };
  }

  // C·∫•u h√¨nh REPO v√† PATH
  // üí• THAY TH·∫æ 'YOUR_GITHUB_USERNAME' B·∫∞NG USERNAME C·ª¶A B·∫†N
  const owner = "duphan97"; 
  // üí• THAY TH·∫æ 'YOUR_REPO_NAME' B·∫∞NG T√äN REPO CH·ª®A CODE C·ª¶A B·∫†N
  const repo = "9cay"; 
  
  const filePath = "sessions/game_sessions.json"; // File JSON t·ªïng s·∫Ω ƒë∆∞·ª£c l∆∞u/c·∫≠p nh·∫≠t t·∫°i ƒë√¢y
  const branch = "main"; // ƒê·ªïi th√†nh "gh-pages" n·∫øu b·∫°n host b·∫±ng nh√°nh ƒë√≥

  // 2. Ph√¢n t√≠ch d·ªØ li·ªáu JSON t·ª´ client g·ª≠i l√™n
  let sessionData;
  try {
    sessionData = JSON.parse(event.body);
  } catch (error) {
    return {
      statusCode: 400,
      body: JSON.stringify({ message: "Invalid JSON body." }),
    };
  }
  
  // Th√™m d·∫•u th·ªùi gian server-side ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh duy nh·∫•t
  sessionData.serverTimestamp = new Date().toISOString();

  const octokit = new Octokit({ auth: GITHUB_PAT });

  try {
    // --- B∆Ø·ªöC A: L·∫§Y N·ªòI DUNG T·ªÜP HI·ªÜN T·∫†I (GET) ---
    let existingContent = [];
    let sha = null;
    try {
      const response = await octokit.request('GET /repos/{owner}/{repo}/contents/{path}', {
        owner,
        repo,
        path: filePath,
        ref: branch
      });
      
      // N·∫øu t·ªáp t·ªìn t·∫°i, l·∫•y SHA v√† n·ªôi dung
      if (response.status === 200) {
        sha = response.data.sha;
        // N·ªôi dung tr·∫£ v·ªÅ l√† base64, c·∫ßn gi·∫£i m√£
        const contentBase64 = response.data.content;
        const contentDecoded = Buffer.from(contentBase64, 'base64').toString('utf8');
        existingContent = JSON.parse(contentDecoded);
      }
    } catch (e) {
      // B·ªè qua l·ªói 404 (Not Found) n·∫øu t·ªáp ch∆∞a t·ªìn t·∫°i
      if (e.status !== 404) {
          throw e; // N√©m l·ªói kh√°c 404
      }
    }

    // --- B∆Ø·ªöC B: C·∫¨P NH·∫¨T N·ªòI DUNG M·ªöI ---
    if (!Array.isArray(existingContent)) {
        // ƒê·∫£m b·∫£o n·ªôi dung l√† m·ªôt m·∫£ng n·∫øu file b·ªã l·ªói format
        existingContent = []; 
    }
    existingContent.push(sessionData);
    const newContentBase64 = Buffer.from(JSON.stringify(existingContent, null, 2)).toString('base64');
    
    // --- B∆Ø·ªöC C: GHI L·∫†I T·ªÜP L√äN GITHUB (PUT) ---
    const commitMessage = `Auto-save: Game Session ${sessionData.sessionId} completed.`;
    
    const updateResponse = await octokit.request('PUT /repos/{owner}/{repo}/contents/{path}', {
      owner,
      repo,
      path: filePath,
      message: commitMessage,
      content: newContentBase64,
      sha: sha, // C·∫ßn SHA ƒë·ªÉ update. N·∫øu SHA l√† null, GitHub s·∫Ω t·∫°o t·ªáp m·ªõi.
      branch: branch
    });

    return {
      statusCode: 200,
      body: JSON.stringify({ message: "Session saved successfully!", commit: updateResponse.data.commit.sha }),
    };

  } catch (error) {
    return {
      statusCode: error.status || 500,
      body: JSON.stringify({ message: "Failed to save session to GitHub. Check Netlify logs for details." }),
    };
  }
};